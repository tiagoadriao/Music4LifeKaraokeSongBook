@using Microsoft.Extensions.Caching.Memory;

@inherits LayoutComponentBase

@inject IMemoryCache cache
@inject IJSRuntime jsRuntime
@inject Songbook songbook

<MudThemeProvider Theme="@mudTheme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3 app-bar-text">Lista de Músicas Digital</MudText>
        <MudSpacer />
        <MudToggleIconButton Title="Off" Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" Color="Color.Surface" ToggledColor="Color.Primary" @bind-Toggled="@_isDarkMode" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column align-content-center justify-content-center gap-1 px-1 py-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    MudTheme mudTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Teal.Default,
                Secondary = Colors.Teal.Accent4,
                AppbarBackground = Colors.Teal.Default
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Teal.Lighten1,
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {   
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            // await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();

            await GetSongbook();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task GetSongbook()
    {
        songbook = await cache.GetOrCreateAsync<Songbook>("songBook", async data =>
         {
             Songbook result = new();

             data.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10);

             try
             {
                 List<Singer> singers = (await jsRuntime.InvokeAsync<Singer[]>("GetSingers")).ToList();

                 List<Song> songs = (await jsRuntime.InvokeAsync<Song[]>("GetSongs")).ToList();

                 if (singers != null && songs != null)
                 {
                     result.Songs =
                        (from song in songs
                          join singer in singers on song.SingerId equals singer.Id
                          orderby song.Language, singer.Name, song.Name
                          select new SongDb(
                                  song.Id,
                                  song.Name,
                                  song.SingerId,
                                  singer.Name,
                                  song.Language
                          )).ToList();
                 }

                 // result.Songs = (await jsRuntime.InvokeAsync<SongDb[]>(
                 // "QueryDB",
                 // @"SELECT songs.Id, songs.Name, songs.SingerId, singers.Name as SingerName, songs.Language
                 // FROM music4lifesongbook.Songs AS songs
                 // LEFT JOIN music4lifesongbook.Singers As singers
                 // on singers.Id = songs.SingerId
                 // order by songs.Language, singers.Name, songs.Name"
                 //    )).ToList();

                 return result;

             }
             catch (Exception e)
             {
                 System.Diagnostics.Debug.WriteLine(e);
                 data.AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(1);
                 return result;
             }
         });

        StateHasChanged();
    }
}

<style>
    .app-bar-text {
        font-variant-caps: all-small-caps;
    }
</style>