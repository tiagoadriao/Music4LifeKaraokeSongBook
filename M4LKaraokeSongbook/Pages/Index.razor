@page "/"
@using Microsoft.Extensions.Caching.Memory;
@using MySqlConnector;
@using System.Text;
@using System.Globalization;

@inject IMemoryCache cache
@inject Songbook songbook

@inject IJSRuntime jsRuntime

<MudCard Class="pa-1">
    <MudCardMedia Image="images/logo.png" Height="100" />
    <MudSpacer />
</MudCard>


<MudCard Class="pa-1">
    <MudCardContent Class="pa-1">
        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert>
             <MudTabs AlwaysShowScrollButtons Rounded @bind-ActivePanelIndex="activeIndex">
                <MudTabPanel Text="Português" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Brasileiro" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Africano" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Espanhol" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Italiano" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Francês" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Alemão" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
                <MudTabPanel Text="Inglês" OnClick="@( () => GetSongbookFromLanguage((Language)(activeIndex + 1)))">
                </MudTabPanel>
            </MudTabs>
        </MudHidden>

         <MudHidden Breakpoint="Breakpoint.Xs" Invert>
             <div class="d-flex justify-content-end align-items-center gap-3">
            <MudIcon Icon="@Icons.Material.Filled.Translate" Size="Size.Large" Color="Color.Primary"></MudIcon>
            <MudMenu Class="d-flex justify-content-end" Label="@selectedLanguage" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Outlined" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft">
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.Portuguese))" OnClick="@( () => GetSongbookFromLanguage(Language.Portuguese))">
                     Português
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.Brazilian))" OnClick="@( () => GetSongbookFromLanguage(Language.Brazilian))">
                     Brasileiro
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.African))" OnClick="@( () => GetSongbookFromLanguage(Language.African))">
                     Africano
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.Spanish))" OnClick="@( () => GetSongbookFromLanguage(Language.Spanish))">
                     Espanhol
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.Italian))" OnClick="@( () => GetSongbookFromLanguage(Language.Italian))">
                     Italiano
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.French))" OnClick="@( () => GetSongbookFromLanguage(Language.French))">
                     Francês
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.German))" OnClick="@( () => GetSongbookFromLanguage(Language.German))">
                     Alemão
                 </MudMenuItem>
                 <MudMenuItem Class="language-selector" OnTouch="@(() => GetSongbookFromLanguage(Language.English))" OnClick="@( () => GetSongbookFromLanguage(Language.English))">
                     Inglês
                 </MudMenuItem>
            </MudMenu>
             </div>
        </MudHidden>

            <MudTextField @bind-Value="songFilter" Placeholder="Pesquisar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" HelperTextOnFocus HelperText="Pesquisa pelo nome da música ou do interprete" DebounceInterval="750" Clearable></MudTextField>
            <MudTable 
                Breakpoint="Breakpoint.None"
                Items="@languageSongbook.Songs" 
                Filter="new Func<SongDb, bool>(SearchTableSong)" 
                GroupBy="@_groupDefinition" 
                Dense
                Loading="@loading"
                LoadingProgressColor="@Color.Primary"
                GroupHeaderClass="group-header-m4l"
                HeaderClass="header-m4l"
                FooterClass="mud-table-pagination-toolbar__m4l"
            >
                <HeaderContent>
                    <MudTh>Interprete</MudTh>
                    <MudTh>Música</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="2">@($"{context.Key}")</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd></MudTd>
                    <MudTd>@context.Name</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    Não temos essa música. Procura outra...
                </NoRecordsContent>
                <PagerContent>
                    <M4LKaraokeSongbook.MudTablePager Class="mud-table-pager-m4l" PageSizeOptions="new int[] { 25, 50, 100 }" HorizontalAlignment="HorizontalAlignment.Center" RowsPerPageString="Músicas por página:" InfoFormat="{first_item}-{last_item} Total:{all_items}" />
                </PagerContent>
            </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private SongDb songSearch = null!;
    private string songFilter = null!;
    private IEnumerable<SongDb> songbookSearched = new List<SongDb>();

    private Songbook languageSongbook = new();

    private bool loading = true;
    private int activeIndex = 0;
    private string? selectedLanguage = GetLanguageName(Language.Portuguese);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSongbook();
            await GetSongbookFromLanguage();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task GetSongbook()
    {
        songbook = await cache.GetOrCreateAsync<Songbook>("songBook", async data =>
         {
             Songbook result = new();

             data.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10);

             try
             {
                 List<Song> songs = (await jsRuntime.InvokeAsync<Song[]>("GetSongs")).ToList();
                 List<Singer> singers = (await jsRuntime.InvokeAsync<Singer[]>("GetSingers")).ToList();

                 if (singers != null && songs != null)
                 {
                     result.Songs =
                        (from song in songs
                        join singer in singers on song.SingerId equals singer.Id
                        orderby song.Language, singer.Name, song.Name
                        select new SongDb(
                            song.Id,
                            song.Name,
                            song.SingerId,
                            singer.Name,
                            song.Language
                        )).ToList();
                 }

                 // result.Songs = (await jsRuntime.InvokeAsync<SongDb[]>(
                 // "QueryDB", 
                 // @"SELECT songs.Id, songs.Name, songs.SingerId, singers.Name as SingerName, songs.Language
                 // FROM music4lifesongbook.Songs AS songs
                 // LEFT JOIN music4lifesongbook.Singers As singers
                 // on singers.Id = songs.SingerId
                 // order by songs.Language, singers.Name, songs.Name"
                 //    )).ToList();

                 return result;

             }
             catch (Exception e)
             {
                 System.Diagnostics.Debug.WriteLine(e);
                 data.AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(1);
                 return result;
             }
         });

        loading = false;

        StateHasChanged();
    }

    private async Task GetSongbookFromLanguage(Language language = Language.Portuguese)
    {
        int languageCodeOffset = 1;

        int languageIndex = (int)language - languageCodeOffset;

        if (activeIndex != languageIndex)
        {
            activeIndex = languageIndex;
        }

        selectedLanguage = GetLanguageName(language);

        languageSongbook.Songs = songbook?.Songs?.Where(x => x.Language == language).ToList();

        StateHasChanged();
    }

    private bool SearchTableSong(SongDb song) => FilterFunc(song, songFilter);

    private bool FilterFunc(SongDb song, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        CompareInfo compareInfo = CultureInfo.CurrentCulture.CompareInfo;

        int indexName = compareInfo.IndexOf(song.Name, searchString, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);
        int indexSinger = compareInfo.IndexOf(song.SingerName, searchString, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);

        return indexName >= 0 || indexSinger >= 0;
    }

    private async Task<IEnumerable<SongDb>> SearchSong(string value)
    {
            await Task.Delay(5);

            CompareInfo compareInfo = CultureInfo.CurrentCulture.CompareInfo;

            if (string.IsNullOrEmpty(value)) {
                songbookSearched = songbook.Songs.OrderBy( x => x.Language).ThenBy(x => x.SingerName).ThenBy(x => x.Name);
                return songbookSearched;
            }

            songbookSearched = songbook.Songs
                .Where(
                    x =>
                    {
                        int indexName = compareInfo.IndexOf(x.Name, value, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);
                        int indexSinger = compareInfo.IndexOf(x.SingerName, value, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);

                        return indexName >= 0  || indexSinger >= 0;
                    })
                .OrderBy( x => x.SingerName).ThenBy( x => x.Name );

            return songbookSearched;
    }

    private TableGroupDefinition<SongDb> _groupDefinition = new()
        {
            GroupName = "Cantor",
            Expandable = false,
            Selector = (e) => e.SingerName
        };

    public static string GetLanguageName(Language language)
    {
        switch (language)
        {
            case Language.Portuguese:
                return "Português";
            case Language.Brazilian:
                return "Brasileiro";
            case Language.African:
                return "Africano";
            case Language.Spanish:
                return "Espanhol";
            case Language.Italian:
                return "Italiano";
            case Language.French:
                return "Francês";
            case Language.German:
                return "Alemão";
            case Language.English:
                return "Inglês";
            default:
                return "Error";
        }
    }
}

<style>
    .group-header-m4l * {
        background-color: var(--mud-palette-background-grey) !important;
        font-size: 1.5rem !important;
        font-variant-caps: all-small-caps;
    }

    .header-m4l * {
        background-color: var(--mud-palette-primary) !important;
        color: var(--mud-palette-dark-text) !important;
        font-weight: 900;
        line-height: 1.5rem;
        font-variant-caps: all-small-caps;
        font-size: 1.35rem !important;
    }
    
    td {
        font-weight: 300 !important;
        font-size: 1.3rem !important;
        font-variant-caps: all-small-caps;
    }

    .language-selector {
        width: 100%;
    }

    .mud-table-pager-m4l {
        justify-content: space-between;
    }


    @@media (max-width: 600px) {

        .mud-table-pagination-toolbar {
    
           height: fit-content;
           flex-wrap: wrap;
        }
    }
    
</style>
