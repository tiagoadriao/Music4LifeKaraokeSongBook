@page "/"
@using Microsoft.Extensions.Caching.Memory;
@using MySqlConnector;
@using System.Text;
@using System.Globalization;

<PageTitle>Index</PageTitle>

@inject IMemoryCache cache
@inject Songbook songbook

@inject IJSRuntime jsRuntime

<MudCard Class="pa-3">
    <MudCardMedia Image="images/logo.png" Height="100" />
    <MudSpacer />
    <MudTextField @bind-Value="songFilter" Placeholder="Pesquisar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="px-3" HelperTextOnFocus HelperText="Pesquisa pelo nome da música ou do interprete" DebounceInterval="750" Clearable></MudTextField>
</MudCard>


<MudCard Class="pa-3">
    <MudCardContent>
        <MudTable 
            Breakpoint="Breakpoint.None"
            Items="@songbook.Songs" 
            Filter="new Func<SongDb, bool>(SearchTableSong)" 
            GroupBy="@_groupDefinition" 
            Dense
            Loading="@loading"
            LoadingProgressColor="@Color.Primary"
            GroupHeaderClass="group-header-m4l"
        >
            <HeaderContent>
                <MudTh>Interprete</MudTh>
                <MudTh>Música</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="2">@($"{context.Key}")</MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd></MudTd>
                <MudTd>@context.Name</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                Não temos essa música. Procura outra...
            </NoRecordsContent>
        </MudTable>
    </MudCardContent>
</MudCard>

    @code {
    private SongDb songSearch = null!;
    private string songFilter = null!;
    private IEnumerable<SongDb> songbookSearched = new List<SongDb>();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSongbook();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task GetSongbook()
    {
        songbook = await cache.GetOrCreateAsync<Songbook>("songBook", async data =>
         {
             Songbook result = new();

             data.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10);

             result.Songs = (await jsRuntime.InvokeAsync<SongDb[]>(
                 "QueryDB", 
                 @"SELECT songs.Id, songs.Name, songs.SingerId, singers.Name as SingerName, songs.Language
                 FROM music4lifesongbook.Songs AS songs
                 LEFT JOIN music4lifesongbook.Singers As singers
                 on singers.Id = songs.SingerId
                 order by songs.Language, singers.Name, songs.Name"
             )).ToList();

             return result;
         });

        loading = false;

        StateHasChanged();
    }

    private bool SearchTableSong(SongDb song) => FilterFunc(song, songFilter);

    private bool FilterFunc(SongDb song, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        CompareInfo compareInfo = CultureInfo.CurrentCulture.CompareInfo;

        int indexName = compareInfo.IndexOf(song.Name, searchString, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);
        int indexSinger = compareInfo.IndexOf(song.SingerName, searchString, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);

        return indexName >= 0 || indexSinger >= 0;
    }

    private async Task<IEnumerable<SongDb>> SearchSong(string value)
    {
            await Task.Delay(5);

            CompareInfo compareInfo = CultureInfo.CurrentCulture.CompareInfo;

            if (string.IsNullOrEmpty(value)) {
                songbookSearched = songbook.Songs.OrderBy( x => x.Language).ThenBy(x => x.SingerName).ThenBy(x => x.Name);
                return songbookSearched;
            }

            songbookSearched = songbook.Songs
                .Where(
                    x =>
                    {
                        int indexName = compareInfo.IndexOf(x.Name, value, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);
                        int indexSinger = compareInfo.IndexOf(x.SingerName, value, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase);

                        return indexName >= 0  || indexSinger >= 0;
                    })
                .OrderBy( x => x.SingerName).ThenBy( x => x.Name );

            return songbookSearched;
    }

    private TableGroupDefinition<SongDb> _groupDefinition = new()
        {
            GroupName = "Cantor",
            Expandable = false,
            Selector = (e) => e.SingerName
        };

    public static string GetLanguageName(Language language)
    {
        switch (language)
        {
            case Language.Portuguese:
                return "Português";
            case Language.Brazilian:
                return "Brasileiro";
            case Language.African:
                return "Africano";
            case Language.Spanish:
                return "Espanhol";
            case Language.Italian:
                return "Italiano";
            case Language.French:
                return "Francês";
            case Language.German:
                return "Alemão";
            case Language.English:
                return "Inglês";
            default:
                return "Error";
        }
    }
}

<style>
    .group-header-m4l {
        font-size: 2rem !important;
        background-color: var(--mud-palette-background-grey) !important;
    }

    .group-header-m4l * {
            font-size: 1.15rem !important;
            font-variant-caps: small-caps;
    } 
</style>